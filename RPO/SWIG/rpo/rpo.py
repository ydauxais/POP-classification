# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rpo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rpo')
    _rpo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rpo', [dirname(__file__)])
        except ImportError:
            import _rpo
            return _rpo
        try:
            _mod = imp.load_module('_rpo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rpo = swig_import_helper()
    del swig_import_helper
else:
    import _rpo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rpo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rpo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rpo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rpo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rpo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rpo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rpo.SwigPyIterator_copy(self)

    def next(self):
        return _rpo.SwigPyIterator_next(self)

    def __next__(self):
        return _rpo.SwigPyIterator___next__(self)

    def previous(self):
        return _rpo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rpo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rpo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rpo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rpo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rpo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rpo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rpo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rpo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class UVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.UVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.UVector___nonzero__(self)

    def __bool__(self):
        return _rpo.UVector___bool__(self)

    def __len__(self):
        return _rpo.UVector___len__(self)

    def __getslice__(self, i, j):
        return _rpo.UVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.UVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.UVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.UVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.UVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.UVector___setitem__(self, *args)

    def pop(self):
        return _rpo.UVector_pop(self)

    def append(self, x):
        return _rpo.UVector_append(self, x)

    def empty(self):
        return _rpo.UVector_empty(self)

    def size(self):
        return _rpo.UVector_size(self)

    def swap(self, v):
        return _rpo.UVector_swap(self, v)

    def begin(self):
        return _rpo.UVector_begin(self)

    def end(self):
        return _rpo.UVector_end(self)

    def rbegin(self):
        return _rpo.UVector_rbegin(self)

    def rend(self):
        return _rpo.UVector_rend(self)

    def clear(self):
        return _rpo.UVector_clear(self)

    def get_allocator(self):
        return _rpo.UVector_get_allocator(self)

    def pop_back(self):
        return _rpo.UVector_pop_back(self)

    def erase(self, *args):
        return _rpo.UVector_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_UVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.UVector_push_back(self, x)

    def front(self):
        return _rpo.UVector_front(self)

    def back(self):
        return _rpo.UVector_back(self)

    def assign(self, n, x):
        return _rpo.UVector_assign(self, n, x)

    def resize(self, *args):
        return _rpo.UVector_resize(self, *args)

    def insert(self, *args):
        return _rpo.UVector_insert(self, *args)

    def reserve(self, n):
        return _rpo.UVector_reserve(self, n)

    def capacity(self):
        return _rpo.UVector_capacity(self)
    __swig_destroy__ = _rpo.delete_UVector
    __del__ = lambda self: None
UVector_swigregister = _rpo.UVector_swigregister
UVector_swigregister(UVector)

class UMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.UMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.UMatrix___nonzero__(self)

    def __bool__(self):
        return _rpo.UMatrix___bool__(self)

    def __len__(self):
        return _rpo.UMatrix___len__(self)

    def __getslice__(self, i, j):
        return _rpo.UMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.UMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.UMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.UMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.UMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.UMatrix___setitem__(self, *args)

    def pop(self):
        return _rpo.UMatrix_pop(self)

    def append(self, x):
        return _rpo.UMatrix_append(self, x)

    def empty(self):
        return _rpo.UMatrix_empty(self)

    def size(self):
        return _rpo.UMatrix_size(self)

    def swap(self, v):
        return _rpo.UMatrix_swap(self, v)

    def begin(self):
        return _rpo.UMatrix_begin(self)

    def end(self):
        return _rpo.UMatrix_end(self)

    def rbegin(self):
        return _rpo.UMatrix_rbegin(self)

    def rend(self):
        return _rpo.UMatrix_rend(self)

    def clear(self):
        return _rpo.UMatrix_clear(self)

    def get_allocator(self):
        return _rpo.UMatrix_get_allocator(self)

    def pop_back(self):
        return _rpo.UMatrix_pop_back(self)

    def erase(self, *args):
        return _rpo.UMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_UMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.UMatrix_push_back(self, x)

    def front(self):
        return _rpo.UMatrix_front(self)

    def back(self):
        return _rpo.UMatrix_back(self)

    def assign(self, n, x):
        return _rpo.UMatrix_assign(self, n, x)

    def resize(self, *args):
        return _rpo.UMatrix_resize(self, *args)

    def insert(self, *args):
        return _rpo.UMatrix_insert(self, *args)

    def reserve(self, n):
        return _rpo.UMatrix_reserve(self, n)

    def capacity(self):
        return _rpo.UMatrix_capacity(self)
    __swig_destroy__ = _rpo.delete_UMatrix
    __del__ = lambda self: None
UMatrix_swigregister = _rpo.UMatrix_swigregister
UMatrix_swigregister(UMatrix)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.StringVector___nonzero__(self)

    def __bool__(self):
        return _rpo.StringVector___bool__(self)

    def __len__(self):
        return _rpo.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _rpo.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.StringVector___setitem__(self, *args)

    def pop(self):
        return _rpo.StringVector_pop(self)

    def append(self, x):
        return _rpo.StringVector_append(self, x)

    def empty(self):
        return _rpo.StringVector_empty(self)

    def size(self):
        return _rpo.StringVector_size(self)

    def swap(self, v):
        return _rpo.StringVector_swap(self, v)

    def begin(self):
        return _rpo.StringVector_begin(self)

    def end(self):
        return _rpo.StringVector_end(self)

    def rbegin(self):
        return _rpo.StringVector_rbegin(self)

    def rend(self):
        return _rpo.StringVector_rend(self)

    def clear(self):
        return _rpo.StringVector_clear(self)

    def get_allocator(self):
        return _rpo.StringVector_get_allocator(self)

    def pop_back(self):
        return _rpo.StringVector_pop_back(self)

    def erase(self, *args):
        return _rpo.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.StringVector_push_back(self, x)

    def front(self):
        return _rpo.StringVector_front(self)

    def back(self):
        return _rpo.StringVector_back(self)

    def assign(self, n, x):
        return _rpo.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _rpo.StringVector_resize(self, *args)

    def insert(self, *args):
        return _rpo.StringVector_insert(self, *args)

    def reserve(self, n):
        return _rpo.StringVector_reserve(self, n)

    def capacity(self):
        return _rpo.StringVector_capacity(self)
    __swig_destroy__ = _rpo.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _rpo.StringVector_swigregister
StringVector_swigregister(StringVector)

class EpisodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpisodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpisodeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.EpisodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.EpisodeVector___nonzero__(self)

    def __bool__(self):
        return _rpo.EpisodeVector___bool__(self)

    def __len__(self):
        return _rpo.EpisodeVector___len__(self)

    def __getslice__(self, i, j):
        return _rpo.EpisodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.EpisodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.EpisodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.EpisodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.EpisodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.EpisodeVector___setitem__(self, *args)

    def pop(self):
        return _rpo.EpisodeVector_pop(self)

    def append(self, x):
        return _rpo.EpisodeVector_append(self, x)

    def empty(self):
        return _rpo.EpisodeVector_empty(self)

    def size(self):
        return _rpo.EpisodeVector_size(self)

    def swap(self, v):
        return _rpo.EpisodeVector_swap(self, v)

    def begin(self):
        return _rpo.EpisodeVector_begin(self)

    def end(self):
        return _rpo.EpisodeVector_end(self)

    def rbegin(self):
        return _rpo.EpisodeVector_rbegin(self)

    def rend(self):
        return _rpo.EpisodeVector_rend(self)

    def clear(self):
        return _rpo.EpisodeVector_clear(self)

    def get_allocator(self):
        return _rpo.EpisodeVector_get_allocator(self)

    def pop_back(self):
        return _rpo.EpisodeVector_pop_back(self)

    def erase(self, *args):
        return _rpo.EpisodeVector_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_EpisodeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.EpisodeVector_push_back(self, x)

    def front(self):
        return _rpo.EpisodeVector_front(self)

    def back(self):
        return _rpo.EpisodeVector_back(self)

    def assign(self, n, x):
        return _rpo.EpisodeVector_assign(self, n, x)

    def resize(self, *args):
        return _rpo.EpisodeVector_resize(self, *args)

    def insert(self, *args):
        return _rpo.EpisodeVector_insert(self, *args)

    def reserve(self, n):
        return _rpo.EpisodeVector_reserve(self, n)

    def capacity(self):
        return _rpo.EpisodeVector_capacity(self)
    __swig_destroy__ = _rpo.delete_EpisodeVector
    __del__ = lambda self: None
EpisodeVector_swigregister = _rpo.EpisodeVector_swigregister
EpisodeVector_swigregister(EpisodeVector)

class ItemPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ItemPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rpo.new_ItemPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _rpo.ItemPair_first_set
    __swig_getmethods__["first"] = _rpo.ItemPair_first_get
    if _newclass:
        first = _swig_property(_rpo.ItemPair_first_get, _rpo.ItemPair_first_set)
    __swig_setmethods__["second"] = _rpo.ItemPair_second_set
    __swig_getmethods__["second"] = _rpo.ItemPair_second_get
    if _newclass:
        second = _swig_property(_rpo.ItemPair_second_get, _rpo.ItemPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _rpo.delete_ItemPair
    __del__ = lambda self: None
ItemPair_swigregister = _rpo.ItemPair_swigregister
ItemPair_swigregister(ItemPair)

class EventVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.EventVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.EventVector___nonzero__(self)

    def __bool__(self):
        return _rpo.EventVector___bool__(self)

    def __len__(self):
        return _rpo.EventVector___len__(self)

    def __getslice__(self, i, j):
        return _rpo.EventVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.EventVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.EventVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.EventVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.EventVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.EventVector___setitem__(self, *args)

    def pop(self):
        return _rpo.EventVector_pop(self)

    def append(self, x):
        return _rpo.EventVector_append(self, x)

    def empty(self):
        return _rpo.EventVector_empty(self)

    def size(self):
        return _rpo.EventVector_size(self)

    def swap(self, v):
        return _rpo.EventVector_swap(self, v)

    def begin(self):
        return _rpo.EventVector_begin(self)

    def end(self):
        return _rpo.EventVector_end(self)

    def rbegin(self):
        return _rpo.EventVector_rbegin(self)

    def rend(self):
        return _rpo.EventVector_rend(self)

    def clear(self):
        return _rpo.EventVector_clear(self)

    def get_allocator(self):
        return _rpo.EventVector_get_allocator(self)

    def pop_back(self):
        return _rpo.EventVector_pop_back(self)

    def erase(self, *args):
        return _rpo.EventVector_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_EventVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.EventVector_push_back(self, x)

    def front(self):
        return _rpo.EventVector_front(self)

    def back(self):
        return _rpo.EventVector_back(self)

    def assign(self, n, x):
        return _rpo.EventVector_assign(self, n, x)

    def resize(self, *args):
        return _rpo.EventVector_resize(self, *args)

    def insert(self, *args):
        return _rpo.EventVector_insert(self, *args)

    def reserve(self, n):
        return _rpo.EventVector_reserve(self, n)

    def capacity(self):
        return _rpo.EventVector_capacity(self)
    __swig_destroy__ = _rpo.delete_EventVector
    __del__ = lambda self: None
EventVector_swigregister = _rpo.EventVector_swigregister
EventVector_swigregister(EventVector)

class EventStrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventStrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventStrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.EventStrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.EventStrVector___nonzero__(self)

    def __bool__(self):
        return _rpo.EventStrVector___bool__(self)

    def __len__(self):
        return _rpo.EventStrVector___len__(self)

    def __getslice__(self, i, j):
        return _rpo.EventStrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.EventStrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.EventStrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.EventStrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.EventStrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.EventStrVector___setitem__(self, *args)

    def pop(self):
        return _rpo.EventStrVector_pop(self)

    def append(self, x):
        return _rpo.EventStrVector_append(self, x)

    def empty(self):
        return _rpo.EventStrVector_empty(self)

    def size(self):
        return _rpo.EventStrVector_size(self)

    def swap(self, v):
        return _rpo.EventStrVector_swap(self, v)

    def begin(self):
        return _rpo.EventStrVector_begin(self)

    def end(self):
        return _rpo.EventStrVector_end(self)

    def rbegin(self):
        return _rpo.EventStrVector_rbegin(self)

    def rend(self):
        return _rpo.EventStrVector_rend(self)

    def clear(self):
        return _rpo.EventStrVector_clear(self)

    def get_allocator(self):
        return _rpo.EventStrVector_get_allocator(self)

    def pop_back(self):
        return _rpo.EventStrVector_pop_back(self)

    def erase(self, *args):
        return _rpo.EventStrVector_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_EventStrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.EventStrVector_push_back(self, x)

    def front(self):
        return _rpo.EventStrVector_front(self)

    def back(self):
        return _rpo.EventStrVector_back(self)

    def assign(self, n, x):
        return _rpo.EventStrVector_assign(self, n, x)

    def resize(self, *args):
        return _rpo.EventStrVector_resize(self, *args)

    def insert(self, *args):
        return _rpo.EventStrVector_insert(self, *args)

    def reserve(self, n):
        return _rpo.EventStrVector_reserve(self, n)

    def capacity(self):
        return _rpo.EventStrVector_capacity(self)
    __swig_destroy__ = _rpo.delete_EventStrVector
    __del__ = lambda self: None
EventStrVector_swigregister = _rpo.EventStrVector_swigregister
EventStrVector_swigregister(EventStrVector)

class ClassVerticalDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassVerticalDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassVerticalDatabase, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _rpo.ClassVerticalDatabase_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpo.ClassVerticalDatabase___nonzero__(self)

    def __bool__(self):
        return _rpo.ClassVerticalDatabase___bool__(self)

    def __len__(self):
        return _rpo.ClassVerticalDatabase___len__(self)

    def __getslice__(self, i, j):
        return _rpo.ClassVerticalDatabase___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpo.ClassVerticalDatabase___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpo.ClassVerticalDatabase___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpo.ClassVerticalDatabase___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpo.ClassVerticalDatabase___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpo.ClassVerticalDatabase___setitem__(self, *args)

    def pop(self):
        return _rpo.ClassVerticalDatabase_pop(self)

    def append(self, x):
        return _rpo.ClassVerticalDatabase_append(self, x)

    def empty(self):
        return _rpo.ClassVerticalDatabase_empty(self)

    def size(self):
        return _rpo.ClassVerticalDatabase_size(self)

    def swap(self, v):
        return _rpo.ClassVerticalDatabase_swap(self, v)

    def begin(self):
        return _rpo.ClassVerticalDatabase_begin(self)

    def end(self):
        return _rpo.ClassVerticalDatabase_end(self)

    def rbegin(self):
        return _rpo.ClassVerticalDatabase_rbegin(self)

    def rend(self):
        return _rpo.ClassVerticalDatabase_rend(self)

    def clear(self):
        return _rpo.ClassVerticalDatabase_clear(self)

    def get_allocator(self):
        return _rpo.ClassVerticalDatabase_get_allocator(self)

    def pop_back(self):
        return _rpo.ClassVerticalDatabase_pop_back(self)

    def erase(self, *args):
        return _rpo.ClassVerticalDatabase_erase(self, *args)

    def __init__(self, *args):
        this = _rpo.new_ClassVerticalDatabase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rpo.ClassVerticalDatabase_push_back(self, x)

    def front(self):
        return _rpo.ClassVerticalDatabase_front(self)

    def back(self):
        return _rpo.ClassVerticalDatabase_back(self)

    def assign(self, n, x):
        return _rpo.ClassVerticalDatabase_assign(self, n, x)

    def resize(self, *args):
        return _rpo.ClassVerticalDatabase_resize(self, *args)

    def insert(self, *args):
        return _rpo.ClassVerticalDatabase_insert(self, *args)

    def reserve(self, n):
        return _rpo.ClassVerticalDatabase_reserve(self, n)

    def capacity(self):
        return _rpo.ClassVerticalDatabase_capacity(self)
    __swig_destroy__ = _rpo.delete_ClassVerticalDatabase
    __del__ = lambda self: None
ClassVerticalDatabase_swigregister = _rpo.ClassVerticalDatabase_swigregister
ClassVerticalDatabase_swigregister(ClassVerticalDatabase)

class TidMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TidMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TidMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rpo.new_TidMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _rpo.TidMap___getitem__(self, *args)
    __swig_destroy__ = _rpo.delete_TidMap
    __del__ = lambda self: None
TidMap_swigregister = _rpo.TidMap_swigregister
TidMap_swigregister(TidMap)

class Item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Item, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rpo.new_Item(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_card(self):
        return _rpo.Item_get_card(self)

    def get_item(self):
        return _rpo.Item_get_item(self)

    def __lt__(self, other):
        return _rpo.Item___lt__(self, other)
    __swig_destroy__ = _rpo.delete_Item
    __del__ = lambda self: None
Item_swigregister = _rpo.Item_swigregister
Item_swigregister(Item)

class Multiset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Multiset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Multiset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rpo.new_Multiset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_item_vector(self):
        return _rpo.Multiset_get_item_vector(self)

    def get_occurrences(self, *args):
        return _rpo.Multiset_get_occurrences(self, *args)

    def get_event_name(self, code):
        return _rpo.Multiset_get_event_name(self, code)

    def get_multiset(self):
        return _rpo.Multiset_get_multiset(self)

    def get_multiset_str_list(self):
        return _rpo.Multiset_get_multiset_str_list(self)

    def size(self):
        return _rpo.Multiset_size(self)

    def __str__(self):
        return _rpo.Multiset___str__(self)
    __swig_destroy__ = _rpo.delete_Multiset
    __del__ = lambda self: None
Multiset_swigregister = _rpo.Multiset_swigregister
Multiset_swigregister(Multiset)

class Episode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Episode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Episode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rpo.new_Episode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_constraint_map(self):
        return _rpo.Episode_get_constraint_map(self)

    def get_frequencies(self):
        return _rpo.Episode_get_frequencies(self)

    def get_frequency(self, class_id):
        return _rpo.Episode_get_frequency(self, class_id)

    def get_multiset(self):
        return _rpo.Episode_get_multiset(self)

    def get_tid_list(self):
        return _rpo.Episode_get_tid_list(self)

    def is_chronicle(self):
        return _rpo.Episode_is_chronicle(self)

    def is_valid(self):
        return _rpo.Episode_is_valid(self)

    def occurs_in_sequence(self, sequence, number=False):
        return _rpo.Episode_occurs_in_sequence(self, sequence, number)

    def set_frequencies(self, *args):
        return _rpo.Episode_set_frequencies(self, *args)

    def set_tid_list(self, tid_list):
        return _rpo.Episode_set_tid_list(self, tid_list)

    def set_not_valid(self):
        return _rpo.Episode_set_not_valid(self)

    def __str__(self):
        return _rpo.Episode___str__(self)
    __swig_destroy__ = _rpo.delete_Episode
    __del__ = lambda self: None
Episode_swigregister = _rpo.Episode_swigregister
Episode_swigregister(Episode)

class VerticalDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerticalDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VerticalDatabase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _rpo.delete_VerticalDatabase
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _rpo.new_VerticalDatabase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_event_name(self, code):
        return _rpo.VerticalDatabase_get_event_name(self, code)

    def get_positives_event_cardinalities(self):
        return _rpo.VerticalDatabase_get_positives_event_cardinalities(self)

    def get_multiset_str(self, cardinalities):
        return _rpo.VerticalDatabase_get_multiset_str(self, cardinalities)

    def get_multiset_str_list(self, cardinalities):
        return _rpo.VerticalDatabase_get_multiset_str_list(self, cardinalities)

    def get_occurrences(self, cardinalities, tid_list, negative_tid_list, numeric_intervals, minimal_occurrences, time_window):
        return _rpo.VerticalDatabase_get_occurrences(self, cardinalities, tid_list, negative_tid_list, numeric_intervals, minimal_occurrences, time_window)

    def get_negatives_size(self):
        return _rpo.VerticalDatabase_get_negatives_size(self)

    def get_positives_size(self):
        return _rpo.VerticalDatabase_get_positives_size(self)
    if _newclass:
        get_sequence_occurrences = staticmethod(_rpo.VerticalDatabase_get_sequence_occurrences)
    else:
        get_sequence_occurrences = _rpo.VerticalDatabase_get_sequence_occurrences

    def get_vocabulary(self):
        return _rpo.VerticalDatabase_get_vocabulary(self)

    def is_item_in_transaction(self, item, card, tid):
        return _rpo.VerticalDatabase_is_item_in_transaction(self, item, card, tid)

    def load_negatives(self, filename):
        return _rpo.VerticalDatabase_load_negatives(self, filename)

    def load_positives(self, filename):
        return _rpo.VerticalDatabase_load_positives(self, filename)

    def set_item_mapping(self, item_mapping):
        return _rpo.VerticalDatabase_set_item_mapping(self, item_mapping)

    def set_negatives(self, negatives):
        return _rpo.VerticalDatabase_set_negatives(self, negatives)

    def set_positives(self, positives):
        return _rpo.VerticalDatabase_set_positives(self, positives)
VerticalDatabase_swigregister = _rpo.VerticalDatabase_swigregister
VerticalDatabase_swigregister(VerticalDatabase)

def VerticalDatabase_get_sequence_occurrences(*args):
    return _rpo.VerticalDatabase_get_sequence_occurrences(*args)
VerticalDatabase_get_sequence_occurrences = _rpo.VerticalDatabase_get_sequence_occurrences

class CPEngineOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPEngineOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPEngineOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base_"] = _rpo.CPEngineOptions_base__set
    __swig_getmethods__["base_"] = _rpo.CPEngineOptions_base__get
    if _newclass:
        base_ = _swig_property(_rpo.CPEngineOptions_base__get, _rpo.CPEngineOptions_base__set)
    __swig_setmethods__["minimal_support_"] = _rpo.CPEngineOptions_minimal_support__set
    __swig_getmethods__["minimal_support_"] = _rpo.CPEngineOptions_minimal_support__get
    if _newclass:
        minimal_support_ = _swig_property(_rpo.CPEngineOptions_minimal_support__get, _rpo.CPEngineOptions_minimal_support__set)
    __swig_setmethods__["minimal_growth_rate_"] = _rpo.CPEngineOptions_minimal_growth_rate__set
    __swig_getmethods__["minimal_growth_rate_"] = _rpo.CPEngineOptions_minimal_growth_rate__get
    if _newclass:
        minimal_growth_rate_ = _swig_property(_rpo.CPEngineOptions_minimal_growth_rate__get, _rpo.CPEngineOptions_minimal_growth_rate__set)
    __swig_setmethods__["minimal_length_"] = _rpo.CPEngineOptions_minimal_length__set
    __swig_getmethods__["minimal_length_"] = _rpo.CPEngineOptions_minimal_length__get
    if _newclass:
        minimal_length_ = _swig_property(_rpo.CPEngineOptions_minimal_length__get, _rpo.CPEngineOptions_minimal_length__set)
    __swig_setmethods__["maximal_length_"] = _rpo.CPEngineOptions_maximal_length__set
    __swig_getmethods__["maximal_length_"] = _rpo.CPEngineOptions_maximal_length__get
    if _newclass:
        maximal_length_ = _swig_property(_rpo.CPEngineOptions_maximal_length__get, _rpo.CPEngineOptions_maximal_length__set)
    __swig_setmethods__["closed_"] = _rpo.CPEngineOptions_closed__set
    __swig_getmethods__["closed_"] = _rpo.CPEngineOptions_closed__get
    if _newclass:
        closed_ = _swig_property(_rpo.CPEngineOptions_closed__get, _rpo.CPEngineOptions_closed__set)
    __swig_setmethods__["branch_on_min_"] = _rpo.CPEngineOptions_branch_on_min__set
    __swig_getmethods__["branch_on_min_"] = _rpo.CPEngineOptions_branch_on_min__get
    if _newclass:
        branch_on_min_ = _swig_property(_rpo.CPEngineOptions_branch_on_min__get, _rpo.CPEngineOptions_branch_on_min__set)
    __swig_setmethods__["numeric_intervals_"] = _rpo.CPEngineOptions_numeric_intervals__set
    __swig_getmethods__["numeric_intervals_"] = _rpo.CPEngineOptions_numeric_intervals__get
    if _newclass:
        numeric_intervals_ = _swig_property(_rpo.CPEngineOptions_numeric_intervals__get, _rpo.CPEngineOptions_numeric_intervals__set)
    __swig_setmethods__["output_tid_lists_"] = _rpo.CPEngineOptions_output_tid_lists__set
    __swig_getmethods__["output_tid_lists_"] = _rpo.CPEngineOptions_output_tid_lists__get
    if _newclass:
        output_tid_lists_ = _swig_property(_rpo.CPEngineOptions_output_tid_lists__get, _rpo.CPEngineOptions_output_tid_lists__set)
    __swig_setmethods__["no_output_"] = _rpo.CPEngineOptions_no_output__set
    __swig_getmethods__["no_output_"] = _rpo.CPEngineOptions_no_output__get
    if _newclass:
        no_output_ = _swig_property(_rpo.CPEngineOptions_no_output__get, _rpo.CPEngineOptions_no_output__set)
    __swig_setmethods__["relevant_"] = _rpo.CPEngineOptions_relevant__set
    __swig_getmethods__["relevant_"] = _rpo.CPEngineOptions_relevant__get
    if _newclass:
        relevant_ = _swig_property(_rpo.CPEngineOptions_relevant__get, _rpo.CPEngineOptions_relevant__set)
    __swig_setmethods__["unsupervised_"] = _rpo.CPEngineOptions_unsupervised__set
    __swig_getmethods__["unsupervised_"] = _rpo.CPEngineOptions_unsupervised__get
    if _newclass:
        unsupervised_ = _swig_property(_rpo.CPEngineOptions_unsupervised__get, _rpo.CPEngineOptions_unsupervised__set)
    __swig_setmethods__["episodes_"] = _rpo.CPEngineOptions_episodes__set
    __swig_getmethods__["episodes_"] = _rpo.CPEngineOptions_episodes__get
    if _newclass:
        episodes_ = _swig_property(_rpo.CPEngineOptions_episodes__get, _rpo.CPEngineOptions_episodes__set)

    def __init__(self, s):
        this = _rpo.new_CPEngineOptions(s)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_episodes(self):
        return _rpo.CPEngineOptions_get_episodes(self)

    def set_export_episodes(self):
        return _rpo.CPEngineOptions_set_export_episodes(self)

    def set_solutions(self, n):
        return _rpo.CPEngineOptions_set_solutions(self, n)

    def no_output(self):
        return _rpo.CPEngineOptions_no_output(self)
    __swig_destroy__ = _rpo.delete_CPEngineOptions
    __del__ = lambda self: None
CPEngineOptions_swigregister = _rpo.CPEngineOptions_swigregister
CPEngineOptions_swigregister(CPEngineOptions)


def base_size(options):
    return _rpo.base_size(options)
base_size = _rpo.base_size

def init_database(options):
    return _rpo.init_database(options)
init_database = _rpo.init_database

def set_item_mapping(options, item_mapping):
    return _rpo.set_item_mapping(options, item_mapping)
set_item_mapping = _rpo.set_item_mapping

def set_negatives(options, negatives):
    return _rpo.set_negatives(options, negatives)
set_negatives = _rpo.set_negatives

def set_positives(options, positives):
    return _rpo.set_positives(options, positives)
set_positives = _rpo.set_positives

def parse_files(options, positives, negatives):
    return _rpo.parse_files(options, positives, negatives)
parse_files = _rpo.parse_files

def run(options):
    return _rpo.run(options)
run = _rpo.run
class RelationshipMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelationshipMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelationshipMap, name)
    __repr__ = _swig_repr

    def __init__(self, episode):
        this = _rpo.new_RelationshipMap(episode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, key):
        return _rpo.RelationshipMap___getitem__(self, key)

    def get_relationship_string(self, r):
        return _rpo.RelationshipMap_get_relationship_string(self, r)
    __swig_destroy__ = _rpo.delete_RelationshipMap
    __del__ = lambda self: None
RelationshipMap_swigregister = _rpo.RelationshipMap_swigregister
RelationshipMap_swigregister(RelationshipMap)

# This file is compatible with both classic and new-style classes.


