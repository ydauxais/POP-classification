PROJECT("SWIG_RPO")

CMAKE_MINIMUM_REQUIRED( VERSION 3.5 )

SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")

FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})

FIND_PACKAGE(PythonLibs)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -fPIC")

set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lm" )
set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lrt" )

add_compile_options(-D WITHOUT_RIPPER)

SET(OUTPUT_DIR_FOUND TRUE)
SET(OUTPUT_DIR ${PROJECT_SOURCE_DIR}/rpo)

SET(CMAKE_SWIG_FLAGS "")

SET(Option_handler_API_LIB "option_handler")
SET(CP_engine_API_LIB "CP_engine")
SET(CP_rule_learning_API_LIB "CP_rule_learning")
SET(Database_API_LIB "database")
SET(Pattern_API_LIB "pattern")

SET(REPERTORIES
        ${Database_API_LIB}
        ${Pattern_API_LIB}
        ${Option_handler_API_LIB}
        ${CP_rule_learning_API_LIB}
        ${CP_engine_API_LIB}
        )

FOREACH(folder ${REPERTORIES})
    ADD_SUBDIRECTORY("../${folder}" "${CMAKE_CURRENT_BINARY_DIR}/${folder}")
ENDFOREACH(folder)

include_directories(${HEADERS} )

IF(OUTPUT_DIR_FOUND)
    set(CMAKE_SWIG_OUTDIR ${OUTPUT_DIR})
ENDIF(OUTPUT_DIR_FOUND)

SET(MODULE_NAME rpo)
SET(INTERFACE_NAME ${MODULE_NAME}.i)
SET(LIBRARY_NAME _${MODULE_NAME})

SET_SOURCE_FILES_PROPERTIES(${INTERFACE_NAME} PROPERTIES CPLUSPLUS ON)
SWIG_ADD_LIBRARY(${MODULE_NAME} TYPE MODULE LANGUAGE python SOURCES ${INTERFACE_NAME} python_functions.cpp ${CPPFILES})
set_target_properties(${LIBRARY_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SWIG_OUTDIR})
SWIG_LINK_LIBRARIES(${MODULE_NAME} ${REPERTORIES} ${PYTHON_LIBRARIES})

MESSAGE(STATUS ">> ${OUTPUT_DIR}")

set( CMAKE_VERBOSE_MAKEFILE off )
